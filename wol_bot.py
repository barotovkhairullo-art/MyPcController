import logging
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from wakeonlan import send_magic_packet
from flask import Flask
from threading import Thread

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7680103362:AAHT9Au_JkmeAkkIrZKAa7kRZgvcNfh4g2s')
MAC_ADDRESS = os.environ.get('MAC_ADDRESS', '8C-EC-4B-D5-55-2C')
ALLOWED_USER_IDS = [int(x) for x in os.environ.get('ALLOWED_USER_IDS', '708267814').split(',')]
# =======================

# Flask app –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Replit
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run_flask).start()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = [
    ["‚ö° –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä", "üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º"],
    ["üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å"],
    ["üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def is_user_allowed(update: Update) -> bool:
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return False
    return True

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_user_allowed(update):
        return
    
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n'
        'ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n'
        'üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_user_allowed(update):
        return
    
    text = update.message.text
    
    if text == "‚ö° –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
        await wake_computer(update, context)
    elif text == "üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º":
        await sleep_computer(update, context)
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞":
        await restart_computer(update, context)
    elif text == "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å":
        await shutdown_computer(update, context)
    elif text == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
        await bot_status(update, context)
    elif text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞":
        await stop_bot(update, context)

# ‚ö° –í–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
async def wake_computer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        send_magic_packet(MAC_ADDRESS)
        await update.message.reply_text(
            "‚ö° –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
            "–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=reply_markup
        )
    except Exception as e:
        await update.message.reply_text(
            "üòµ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è.",
            reply_markup=reply_markup
        )

# üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º
async def sleep_computer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üí§ –§—É–Ω–∫—Ü–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
        reply_markup=reply_markup
    )

# üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
async def restart_computer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üîÑ –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
        reply_markup=reply_markup
    )

# üî¥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ
async def shutdown_computer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üî¥ –§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
        reply_markup=reply_markup
    )

# üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Replit\n"
        "‚ö° Wake-on-LAN –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        "üîê –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üåê –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7",
        reply_markup=reply_markup
    )

# ‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
async def stop_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ Replit.\n"
        "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–∫—Ä–æ–π—Ç–µ repl –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Replit.",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥—ã
async def wake(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await wake_computer(update, context)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await bot_status(update, context)

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("wake", wake))
    application.add_handler(CommandHandler("status", status))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()